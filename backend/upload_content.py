#!/usr/bin/env python3
"""
Script pour ajouter du contenu (projets, formations, m√©dias) √† la plateforme
Agro√©cologie & Permaculture
"""

import os
import sys
import requests
import json
from datetime import datetime, timedelta

API_URL = "http://localhost:5000/api"
ADMIN_EMAIL = "admin@agriculture.com"
ADMIN_PASSWORD = "admin123"

class ContentUploader:
    def __init__(self):
        self.token = None
        self.login()

    def login(self):
        """Se connecter en tant qu'admin"""
        response = requests.post(
            f"{API_URL}/auth/login",
            json={"email": ADMIN_EMAIL, "password": ADMIN_PASSWORD}
        )
        if response.status_code == 200:
            self.token = response.json()['access_token']
            print("‚úÖ Connexion r√©ussie!")
        else:
            print("‚ùå Erreur de connexion:", response.json())
            sys.exit(1)

    def get_headers(self):
        """Headers avec token JWT"""
        return {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }

    def create_project(self, data):
        """Cr√©er un projet/r√©alisation"""
        response = requests.post(
            f"{API_URL}/projects",
            json=data,
            headers=self.get_headers()
        )
        if response.status_code == 201:
            project = response.json()
            print(f"‚úÖ Projet cr√©√©: {project['title']} (ID: {project['id']})")
            return project
        else:
            print(f"‚ùå Erreur cr√©ation projet: {response.json()}")
            return None

    def create_training(self, data):
        """Cr√©er une formation"""
        response = requests.post(
            f"{API_URL}/trainings",
            json=data,
            headers=self.get_headers()
        )
        if response.status_code == 201:
            training = response.json()
            print(f"‚úÖ Formation cr√©√©e: {training['title']} (ID: {training['id']})")
            return training
        else:
            print(f"‚ùå Erreur cr√©ation formation: {response.json()}")
            return None

    def create_visit(self, data):
        """Cr√©er une visite"""
        response = requests.post(
            f"{API_URL}/visits",
            json=data,
            headers=self.get_headers()
        )
        if response.status_code == 201:
            visit = response.json()
            print(f"‚úÖ Visite cr√©√©e: {visit['title']} (ID: {visit['id']})")
            return visit
        else:
            print(f"‚ùå Erreur cr√©ation visite: {response.json()}")
            return None

    def upload_media(self, file_path, title=None, description=None):
        """Upload un fichier m√©dia"""
        if not os.path.exists(file_path):
            print(f"‚ùå Fichier non trouv√©: {file_path}")
            return None

        files = {'file': open(file_path, 'rb')}
        data = {}
        if title:
            data['title'] = title
        if description:
            data['description'] = description

        headers = {"Authorization": f"Bearer {self.token}"}

        response = requests.post(
            f"{API_URL}/media/upload",
            files=files,
            data=data,
            headers=headers
        )

        if response.status_code == 201:
            media = response.json()
            print(f"‚úÖ M√©dia upload√©: {media['filename']} (ID: {media['id']})")
            return media
        else:
            print(f"‚ùå Erreur upload m√©dia: {response.json()}")
            return None


def create_sample_content():
    """Cr√©er du contenu d'exemple"""
    uploader = ContentUploader()

    print("\n" + "="*60)
    print("üìù CR√âATION DE PROJETS D'EXEMPLE")
    print("="*60 + "\n")

    # Projet 1: Jardin Agro√©cologique
    project1 = uploader.create_project({
        "title": "Jardin Agro√©cologique de Ziguinchor",
        "slug": "jardin-agroecologique-ziguinchor",
        "description": """Ce projet pilote vise √† d√©montrer la viabilit√© de l'agriculture urbaine
        en permaculture dans la r√©gion de Ziguinchor. Utilisant des techniques innovantes comme
        les buttes lasagnes, le keyhole garden et le compostage, ce jardin de 500m¬≤ produit
        des l√©gumes biologiques tout en r√©g√©n√©rant le sol.

        **Techniques utilis√©es:**
        - Buttes lasagnes en permaculture
        - Keyhole garden pour optimiser l'espace
        - Syst√®me de compostage int√©gr√©
        - Paillage permanent
        - Association de cultures

        **R√©sultats:**
        - Production de 200kg de l√©gumes/mois
        - Am√©lioration de la fertilit√© du sol
        - Cr√©ation de 3 emplois locaux
        - Formation de 50 personnes""",
        "short_description": "Jardin urbain en permaculture de 500m¬≤ produisant des l√©gumes biologiques",
        "location": "Ziguinchor, S√©n√©gal",
        "start_date": "2024-01-15",
        "end_date": "2024-06-30",
        "status": "completed",
        "featured": True,
        "surface_area": 500,
        "techniques_used": ["Buttes lasagnes", "Keyhole garden", "Compostage", "Paillage", "Associations de cultures"],
        "published": True
    })

    # Projet 2: For√™t Comestible
    project2 = uploader.create_project({
        "title": "For√™t Comestible Communautaire",
        "slug": "foret-comestible-communautaire",
        "description": """Cr√©ation d'une for√™t comestible sur 2 hectares, inspir√©e du mod√®le
        des food forests. Ce projet combine arbres fruitiers, plantes vivaces, l√©gumes et
        plantes m√©dicinales dans un syst√®me r√©silient et productif.

        **Objectifs:**
        - S√©curit√© alimentaire communautaire
        - Restauration √©cologique
        - √âducation environnementale
        - G√©n√©ration de revenus durables

        **Esp√®ces plant√©es:**
        - 140 arbres fruitiers (manguiers, anacardiers, agrumes)
        - 250 plantes vivaces
        - Plantes m√©dicinales locales
        - Cultures mara√Æch√®res en sous-√©tage""",
        "short_description": "For√™t comestible de 2 hectares combinant production alimentaire et restauration √©cologique",
        "location": "Bignona, Casamance",
        "start_date": "2024-03-01",
        "status": "in_progress",
        "featured": True,
        "surface_area": 20000,
        "techniques_used": ["Guildes", "Succession √©cologique", "Agroforesterie", "Mulching"],
        "published": True
    })

    # Projet 3: Mara√Æchage Bio
    project3 = uploader.create_project({
        "title": "Mara√Æchage Biologique Intensif",
        "slug": "maraichage-bio-intensif",
        "description": """Exploitation mara√Æch√®re de 1 hectare utilisant les principes du
        mara√Æchage bio-intensif. Production diversifi√©e de l√©gumes biologiques pour le march√©
        local avec des techniques respectueuses de l'environnement.

        **Pratiques mises en ≈ìuvre:**
        - Planches permanentes sur√©lev√©es
        - Rotation des cultures
        - Engrais verts
        - Pr√©parations naturelles (purins, d√©coctions)
        - Gestion int√©gr√©e des ravageurs

        **Production annuelle:**
        - 15 tonnes de l√©gumes vari√©s
        - 50 vari√©t√©s cultiv√©es
        - 100% sans pesticides chimiques""",
        "short_description": "Mara√Æchage bio-intensif de 1 hectare avec production diversifi√©e",
        "location": "Kolda, S√©n√©gal",
        "start_date": "2023-09-01",
        "status": "completed",
        "featured": False,
        "surface_area": 10000,
        "techniques_used": ["Bio-intensif", "Planches permanentes", "Engrais verts", "Rotation"],
        "published": True
    })

    print("\n" + "="*60)
    print("üéì CR√âATION DE FORMATIONS D'EXEMPLE")
    print("="*60 + "\n")

    # Formation 1: Initiation Permaculture
    training1 = uploader.create_training({
        "title": "Initiation √† la Permaculture",
        "slug": "initiation-permaculture",
        "description": """Formation d'introduction aux principes et techniques de la permaculture.
        Apprenez √† concevoir des syst√®mes agricoles durables et r√©silients.

        **Au programme:**
        - √âthique et principes de la permaculture
        - Observation et lecture du paysage
        - Design de syst√®mes permaculturels
        - Gestion de l'eau
        - Sol vivant et compostage
        - Pratiques au jardin

        **M√©thodes p√©dagogiques:**
        - Cours th√©oriques interactifs
        - Ateliers pratiques
        - √âtudes de cas
        - Exercices de design
        - Visite de sites""",
        "short_description": "D√©couvrez les fondamentaux de la permaculture en 3 jours",
        "level": "beginner",
        "duration": 3,
        "max_participants": 20,
        "price": 75000,
        "prerequisites": "Aucun pr√©requis n√©cessaire",
        "objectives": [
            "Comprendre l'√©thique et les principes de la permaculture",
            "Savoir observer et analyser un site",
            "Concevoir un jardin en permaculture simple",
            "Ma√Ætriser les techniques de base du jardinage √©cologique"
        ],
        "program": {
            "Jour 1": ["Introduction √† la permaculture", "√âthique et principes", "Observation du site"],
            "Jour 2": ["Design permaculturel", "Gestion de l'eau", "Sol vivant"],
            "Jour 3": ["Techniques de culture", "Atelier pratique", "Projet personnel"]
        },
        "certification": False,
        "active": True
    })

    # Formation 2: Agroforesterie
    training2 = uploader.create_training({
        "title": "Agroforesterie et Syst√®mes Alimentaires R√©silients",
        "slug": "agroforesterie-systemes-resilients",
        "description": """Formation approfondie sur les syst√®mes agroforestiers et la cr√©ation
        de for√™ts comestibles adapt√©es au climat sah√©lien.

        **Contenu:**
        - Principes de l'agroforesterie
        - Design de food forests
        - S√©lection d'esp√®ces adapt√©es
        - Guildes v√©g√©tales
        - Gestion √† long terme
        - √âconomie des syst√®mes agroforestiers

        **Cas pratiques:**
        - Visite de for√™ts comestibles
        - Exercices de design
        - Plantation collective
        - Planification de projet""",
        "short_description": "Ma√Ætrisez la conception de syst√®mes agroforestiers productifs",
        "level": "intermediate",
        "duration": 5,
        "max_participants": 15,
        "price": 125000,
        "prerequisites": "Notions de base en agriculture ou permaculture recommand√©es",
        "objectives": [
            "Concevoir des syst√®mes agroforestiers adapt√©s",
            "S√©lectionner les bonnes esp√®ces",
            "Cr√©er des guildes productives",
            "G√©rer un syst√®me agroforestier dans le temps"
        ],
        "program": {
            "Jour 1-2": ["Fondamentaux agroforesterie", "√âcologie foresti√®re", "Design"],
            "Jour 3-4": ["S√©lection esp√®ces", "Guildes", "Pratique terrain"],
            "Jour 5": ["Gestion long terme", "√âconomie", "Projets participants"]
        },
        "certification": True,
        "active": True
    })

    print("\n" + "="*60)
    print("üö∂ CR√âATION DE VISITES D'EXEMPLE")
    print("="*60 + "\n")

    # Visite 1: Jardin D√©mo
    visit1 = uploader.create_visit({
        "type": "guided_tour",
        "title": "Visite du Jardin D√©monstratif",
        "description": """D√©couvrez notre jardin d√©monstratif en permaculture o√π nous exp√©rimentons
        diverses techniques adapt√©es au climat local. Une visite guid√©e interactive pour voir
        la permaculture en action!

        **Vous d√©couvrirez:**
        - Buttes de culture permanentes
        - Syst√®me de keyhole garden
        - Zone de compostage
        - Verger en guildes
        - Spirale aromatique
        - Syst√®me de r√©cup√©ration d'eau

        **Inclus:** Guide expert, livret p√©dagogique, d√©gustation de produits du jardin""",
        "duration": 2,
        "max_participants": 15,
        "price_per_person": 5000,
        "includes": ["Guide expert", "Livret p√©dagogique", "D√©gustation"],
        "meeting_point": "Jardin de Ziguinchor, Quartier Til√®ne",
        "active": True
    })

    # Visite 2: Ferme Agro√©cologique
    visit2 = uploader.create_visit({
        "type": "farm_visit",
        "title": "Visite Immersive en Ferme Agro√©cologique",
        "description": """Passez une demi-journ√©e dans une ferme agro√©cologique fonctionnelle.
        Participez aux activit√©s quotidiennes et d√©couvrez les pratiques agricoles durables.

        **Programme:**
        - Accueil et pr√©sentation de la ferme
        - Tour guid√© des cultures
        - Participation aux travaux (r√©colte, plantation, entretien)
        - Atelier transformation de produits
        - Repas fermier bio
        - √âchanges avec les agriculteurs

        **Parfait pour:** Familles, groupes scolaires, futurs agriculteurs""",
        "duration": 4,
        "max_participants": 20,
        "price_per_person": 15000,
        "includes": ["Transport depuis Ziguinchor", "Repas bio", "Activit√©s", "Kit p√©dagogique"],
        "meeting_point": "Parking de la Gare Routi√®re de Ziguinchor",
        "active": True
    })

    print("\n" + "="*60)
    print("‚úÖ CONTENU D'EXEMPLE CR√â√â AVEC SUCC√àS!")
    print("="*60)
    print("\nVous pouvez maintenant:")
    print("- Voir les projets: http://localhost:3000/realisations")
    print("- Voir les formations: http://localhost:3000/formations")
    print("- Contacter pour visites: http://localhost:3000/contact")


def interactive_mode():
    """Mode interactif pour ajouter du contenu"""
    uploader = ContentUploader()

    while True:
        print("\n" + "="*60)
        print("üé® GESTION DU CONTENU - Menu Principal")
        print("="*60)
        print("\n1. Cr√©er un projet/r√©alisation")
        print("2. Cr√©er une formation")
        print("3. Cr√©er une visite")
        print("4. Charger le contenu d'exemple")
        print("5. Quitter")

        choice = input("\nVotre choix (1-5): ").strip()

        if choice == "1":
            create_project_interactive(uploader)
        elif choice == "2":
            create_training_interactive(uploader)
        elif choice == "3":
            create_visit_interactive(uploader)
        elif choice == "4":
            create_sample_content()
        elif choice == "5":
            print("\nüëã Au revoir!")
            break
        else:
            print("‚ùå Choix invalide!")


def create_project_interactive(uploader):
    """Cr√©er un projet en mode interactif"""
    print("\nüìù CR√âATION D'UN NOUVEAU PROJET\n")

    title = input("Titre du projet: ").strip()
    slug = input("Slug (URL-friendly): ").strip() or title.lower().replace(' ', '-')
    description = input("Description compl√®te: ").strip()
    short_description = input("Description courte: ").strip()
    location = input("Localisation: ").strip()
    start_date = input("Date de d√©but (YYYY-MM-DD): ").strip()

    data = {
        "title": title,
        "slug": slug,
        "description": description,
        "short_description": short_description,
        "location": location,
        "start_date": start_date,
        "status": "in_progress",
        "featured": False,
        "published": True
    }

    uploader.create_project(data)


def create_training_interactive(uploader):
    """Cr√©er une formation en mode interactif"""
    print("\nüéì CR√âATION D'UNE NOUVELLE FORMATION\n")

    title = input("Titre de la formation: ").strip()
    slug = input("Slug: ").strip() or title.lower().replace(' ', '-')
    description = input("Description: ").strip()
    short_description = input("Description courte: ").strip()
    duration = int(input("Dur√©e (en jours): ").strip())
    price = int(input("Prix (FCFA): ").strip())

    data = {
        "title": title,
        "slug": slug,
        "description": description,
        "short_description": short_description,
        "level": "beginner",
        "duration": duration,
        "max_participants": 20,
        "price": price,
        "certification": False,
        "active": True
    }

    uploader.create_training(data)


def create_visit_interactive(uploader):
    """Cr√©er une visite en mode interactif"""
    print("\nüö∂ CR√âATION D'UNE NOUVELLE VISITE\n")

    title = input("Titre de la visite: ").strip()
    description = input("Description: ").strip()
    duration = int(input("Dur√©e (en heures): ").strip())
    price = int(input("Prix par personne (FCFA): ").strip())
    meeting_point = input("Point de rencontre: ").strip()

    data = {
        "type": "guided_tour",
        "title": title,
        "description": description,
        "duration": duration,
        "max_participants": 15,
        "price_per_person": price,
        "meeting_point": meeting_point,
        "active": True
    }

    uploader.create_visit(data)


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "--sample":
        # Charger le contenu d'exemple
        create_sample_content()
    else:
        # Mode interactif
        interactive_mode()
