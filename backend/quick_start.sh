#!/bin/bash
# Script de d√©marrage rapide avec SQLite

echo "üöÄ D√©marrage rapide - Agro√©cologie & Permaculture"
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# V√©rifier que nous sommes dans le bon dossier
if [ ! -f "run.py" ]; then
    echo -e "${RED}‚ùå Erreur: Ex√©cutez ce script depuis le dossier backend${NC}"
    exit 1
fi

# V√©rifier l'environnement virtuel
if [ -z "$VIRTUAL_ENV" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  L'environnement virtuel n'est pas activ√©${NC}"
    echo "Activation de l'environnement virtuel..."
    source venv/bin/activate
fi

echo -e "${GREEN}‚úÖ Environnement virtuel activ√©${NC}"
echo ""

# Nettoyer les anciennes donn√©es
echo -e "${YELLOW}√âtape 1: Nettoyage${NC}"
rm -f agriculture.db
rm -rf migrations
echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
echo ""

# Initialiser les migrations
echo -e "${YELLOW}√âtape 2: Initialisation des migrations${NC}"
export FLASK_APP=run.py
flask db init
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur lors de l'initialisation${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Migrations initialis√©es${NC}"
echo ""

# Cr√©er la migration initiale
echo -e "${YELLOW}√âtape 3: Cr√©ation de la migration${NC}"
flask db migrate -m "Initial migration"
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur lors de la cr√©ation de la migration${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Migration cr√©√©e${NC}"
echo ""

# Appliquer les migrations
echo -e "${YELLOW}√âtape 4: Application des migrations${NC}"
flask db upgrade
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Erreur lors de l'application${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Base de donn√©es cr√©√©e${NC}"
echo ""

# Cr√©er les donn√©es de test
echo -e "${YELLOW}√âtape 5: Cr√©ation des donn√©es de test${NC}"
flask seed-db
if [ $? -ne 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Commande seed-db non disponible${NC}"
    echo "Cr√©ation manuelle d'un admin..."
    python3 << 'PYEOF'
from app import create_app, db
from app.models import User

app = create_app()
with app.app_context():
    # V√©rifier si admin existe d√©j√†
    admin = User.query.filter_by(email='admin@agriculture.com').first()
    if not admin:
        admin = User(
            email='admin@agriculture.com',
            first_name='Admin',
            last_name='Syst√®me',
            role='admin'
        )
        admin.set_password('admin123')
        db.session.add(admin)
        db.session.commit()
        print("‚úÖ Utilisateur admin cr√©√©")
        print("   Email: admin@agriculture.com")
        print("   Mot de passe: admin123")
    else:
        print("‚úÖ Admin d√©j√† existant")
PYEOF
fi
echo -e "${GREEN}‚úÖ Donn√©es de test cr√©√©es${NC}"
echo ""

# R√©sum√©
echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}üéâ Installation termin√©e avec succ√®s !${NC}"
echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""
echo "üìù Informations:"
echo "   - Base de donn√©es: SQLite (agriculture.db)"
echo "   - Admin: admin@agriculture.com / admin123"
echo ""
echo "üöÄ Pour d√©marrer le serveur:"
echo "   python run.py"
echo ""
echo "üåê URLs:"
echo "   - Backend API: http://localhost:5000"
echo "   - Health check: http://localhost:5000/health"
echo ""
